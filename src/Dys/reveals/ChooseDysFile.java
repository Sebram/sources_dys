
/*
 * ChooseFile.java
 *
 * Created on 9 juin 2015, 16:47:22
 * 
 * * Copyright © <2015>  <Sebastien Abraham Koné ("Sebram")>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version. 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Contact <Sebastien Abraham Koné ("Sebram")> doyourslide@gmail.com
 */
package Dys.reveals;

import Dys.impress.ImpressOpenedSlideEdit;
import Dys.impress.ImpressSlide;
import Dys.impress.iProject;
import Dys.impress.iSlideForm;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Sebastien Koné skonemailbox@gmail.com
 */
public class ChooseDysFile extends javax.swing.JDialog {
    
    public static ArrayList<String>liste_titre=new ArrayList<String>();
    private String t1[];
    /**
     * Creates new form ChooseFile.
     * @param parent
     * @param modal 
     */
    public ChooseDysFile(java.awt.Frame parent, boolean modal) {
        
        super(parent, modal);
        
        initComponents();
        
        this.setLocationRelativeTo(null);
        
        /**
         * Extension filter.
         */
        javax.swing.filechooser.FileNameExtensionFilter fileExtensionFilter
            = new FileNameExtensionFilter("comma-separated values and text files",
              "dys");               
        jFileChooser1.setFileFilter(fileExtensionFilter);
                
        
        Project.slideList = new ArrayList<Slide>();
        
        iProject.slideList = new ArrayList<ImpressSlide>();
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser(Project.mydeskpath+"/Dys_projects");
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 225, 255), 8));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14));
        jLabel2.setText("OUVRIR/EDITER UN PROJET");

        jLabel1.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel1.setText("(Choisissez un projet et ouvrez le fichier .dys)");

        jFileChooser1.setFont(new java.awt.Font("Arial", 0, 18));
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo-dys-icon128.png"))); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 274, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .add(jLabel1)
                                .add(26, 26, 26)))
                        .add(jLabel3))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jFileChooser1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jFileChooser1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        this.setVisible(false);
        File file;                                                    
        // Recuperation du nom de fichier à copier.
        //----------------------------------------
        // recup du chemin du fichier
        file = jFileChooser1.getSelectedFile();
       
        try{            
            String path =  file.getAbsolutePath();
             /**
             *  Split du chemin dans un tableau pour recup du nom de fichier.
             */
            String tab [] = path.split("/");        
            // nbre de valeur dans le tab
            int r = tab.length; 
            
            
            /**
             * String projectname reçoit l'avant dernière valeur du tab ->  Nom de fichier.
             */
            Project.projectName = tab[r-2]; 
            
            iProject.iprojectName = tab[r-2];  
           
            
        }catch(NullPointerException n){}
        
        // Lecture du fichier  qui contient toutes les valeurs
        ReadFile lire_index = new ReadFile();
        try {
            lire_index.readAllTmpPage(Project.projectName);
        } catch (IOException ex) {
            Logger.getLogger(ChooseDysFile.class.getName()).log(Level.SEVERE, null, ex);
        }
                
        String fulltxt =  lire_index.getAllTmpPage();
        if( fulltxt != null )
        {
                /**
                * Récupération de chaque valeur du fichier dans tableau avec split(). valeur séparées par "xseparatex"
                */ 
                String allslides [] = fulltxt.split("xseparatex");
                
                int nb_slides = allslides.length;  // nombre de slides 

                if(nb_slides==2){          
                    
                    t1 = allslides[1].split("///");
                    
                    if ("impress".equals(t1[1]))
                    {
                     //JOptionPane.showMessageDialog(null, t1[4]);
                     
                      for(int i = 0;i<t1.length;i++){
                        System.out.println(t1[i] );
                      }
                        try{
                            iProject.add(new ImpressSlide(t1[2],t1[3],t1[4],t1[5],t1[6],t1[7],t1[8],t1[9],t1[10],t1[11],t1[12],t1[13],t1[14],t1[15],t1[16],t1[17]));

                            iProject.liste_titre.add(t1[4]); // Add titre slide

                            iProject.iprojectName = t1[3];

                            iProject.setThemeName(t1[16]); // theme du projet                                                                

                            //iSlideForm.setEditOpenedState(true);
                            
                           

                            ImpressOpenedSlideEdit sf = new ImpressOpenedSlideEdit(new javax.swing.JFrame(), true);

                            sf.addWindowListener(new java.awt.event.WindowAdapter() {

                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {

                                dispose();

                                }
                            });

                            sf.setVisible(true);

                        }
                        catch(Exception e ){

                             System.out.println("error sur liste: "+e);
                         } 
                    }
                    else
                        try{

                            Project.slideList.add(new Slide(t1[1],t1[2],t1[3],t1[4],t1[5],t1[6],t1[7],t1[8]));
                            
                            Project.liste_titre.add(t1[5]); // Add titre slide
                            
                            Project.setThemeName(t1[8]); // theme du projet

                            revOpenedSlideEdit se = new revOpenedSlideEdit(new javax.swing.JFrame(), true);
                            
                            se.addWindowListener(new java.awt.event.WindowAdapter() {
                                
                                @Override
                                public void windowClosing(java.awt.event.WindowEvent e) {
                                
                                    dispose();
                                    
                                }
                            });
                            
                            se.setVisible(true); 
                            
                        }catch(Exception e ){
                            
                            System.out.println("error sur liste 1: "+e);
                            
                        }
                     
                }
                
                if(nb_slides > 2){                        

                    for(int i = 1; i < nb_slides; i++)
                    {                        
                         t1 = allslides[i].split("///");
                    
                    
                        if ("impress".equals(t1[1]))
                        {
                           
                           ImpressOpenedSlideEdit.setEditState(true);
                           
                            try{
                                
                                    iProject.add(new ImpressSlide());
                                    
                                    iProject.setId(i-1 ,t1[2]);        
                                    
                                    iProject.setName(i-1, t1[3]);
                                    
                                    iProject.setTitle(i-1, t1[4]);
                                    
                                    iProject.setText(i-1, t1[5]);
                                    
                                    iProject.setTime(i-1, t1[6]);
                                    
                                    iProject.setPlay(i-1, t1[7]);
                                    
                                    iProject.setPosX(i-1, t1[8]);
                                    
                                    iProject.setPosY(i-1, t1[9]);
                                    
                                    iProject.setPosZ(i-1, t1[10]);
                                    
                                    iProject.setRotate(i-1, t1[11]);
                                    
                                    iProject.setRotateX(i-1, t1[12]);
                                    
                                    iProject.setRotateY(i-1, t1[13]);
                                    
                                    iProject.setBg(i-1, t1[14]);
                                    
                                    iProject.setImg(i-1, t1[15]);
                                    
                                    iProject.setScale(i-1, t1[16]);
                                    
                                    iProject.setTheme(i-1, t1[17]);

                                    iProject.liste_titre.add(t1[4]); // Add titre slide

                                    iProject.iprojectName = t1[3];

                                    iProject.setThemeName(t1[17]); // theme du projet                                                                

                                    iSlideForm.setEditOpenedState(true);
                                   
                           
                                    
                            }
                            catch(Exception e ){
                                
                                 System.out.println("error sur liste 2: "+e);
                             }                                                        
                        }
                        else
                        //try{
                            Project.projectName = t1[7];
                            
                            Project.slideList.add(new Slide(t1[1],t1[2],t1[3],t1[4],t1[5],t1[6],t1[7],t1[8]));
                            
                            Project.liste_titre.add(t1[5]); // Add titre slide
                            
                            Project.setThemeName(t1[8]); // theme du projet

                             
                            
                       // }catch(Exception e ){
                            
                           // System.out.println("error sur liste3: "+e);
                            
                       // }
                        
                        

                    }
                    
                     if("impress".equals(t1[1])){ 
                            ImpressOpenedSlideEdit sf = new ImpressOpenedSlideEdit(new javax.swing.JFrame(), true);

                            sf.addWindowListener(new java.awt.event.WindowAdapter() {

                            @Override
                            public void windowClosing(java.awt.event.WindowEvent e) {

                                dispose();

                                }
                            });

                            sf.setVisible(true);
                    }else{
                         revOpenedSlideEdit se = new revOpenedSlideEdit(new javax.swing.JFrame(), true);
                            
                            se.addWindowListener(new java.awt.event.WindowAdapter() {
                                
                                @Override
                                public void windowClosing(java.awt.event.WindowEvent e) {
                                
                                    dispose();
                                    
                                }
                            });
                            
                            se.setVisible(true);
                     }
                    
                   
                }
                
                              
        }
        
     
    }//GEN-LAST:event_jFileChooser1ActionPerformed
  
    
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
